var INVERTER_DELAY = 2;
var AND_GATE_DELAY = 3;
var OR_GATE_DELAY = 5;

func Wire() {
    var value = 0;
    var actions = [];

    func getSignal() {
        return value;
    }

    func setSignal(newValue) {
        if (value == newValue) {
            return;
        }

        value = newValue;
        for (var i = 0; i < length(actions); i += 1) {
            actions[i]();
        }
    }

    func addAction(action) {
        actions = actions + action;
        action();
    }

    return {
        getSignal: getSignal,
        setSignal: setSignal,
        addAction: addAction
    };
}

func Queue() {
    var head = null;
    var tail = null;

    func Node(val, next) {
        return {
            val: val,
            next: next
        };
    }

    func enqueue(action) {
        if (!head) {
            head = Node(action, null);
            tail = head;
            return;
        }

        tail.next = Node(action,null);
        tail = tail.next;
    }

    func dequeue() {
        var node = head;
        head = head.next;

        if (!head) {
            tail = null;
        }

        return node.val;
    }

    func isEmpty() {
        return !head;
    }

    func peek() {
        return head.val;
    }

    return {
        isEmpty: isEmpty,
        enqueue: enqueue,
        dequeue: dequeue,
        peek: peek
    };
}

func PriorityQueue() {
    var head = null;

    func Node(priority, queue, next) {
        return {
            priority: priority,
            queue: queue,
            next: next
        };
    }

    func enqueue(priority, action) {
        if (!head) {
            head = Node(priority, Queue(), null);
            head.queue.enqueue(action);
        }

        var node = head;
        var prev = null;

        while (node) {
            if (priority == node.priority) {
                node.queue.enqueue(action);
                return;
            } else if (priority < node.priority) {
                var newNode = Node(priority, Queue(), null);

                if (!prev) {
                    head = newNode;
                    newNode.next = node;
                } else {
                    prev.next = newNode;
                    newNode.next = node;
                }

                newNode.queue.enqueue(action);
                return;
            }

            prev = node;
            node = node.next;
        }

        prev.next = Node(priority, Queue(), null);
        prev.next.queue.enqueue(action);
    }

    func dequeue() {
        var action = head.queue.dequeue();

        if (head.queue.isEmpty()) {
            head = head.next;
        }

        return action;
    }

    func isEmpty() {
        return !head;
    }

    func currentPriority() {
        if (!head) {
            return 0;
        }

        return head.priority;
    }

    func peek() {
        return head.queue.peek();
    }

    return {
        currentPriority: currentPriority,
        isEmpty: isEmpty,
        enqueue: enqueue,
        dequeue: dequeue,
        peek: peek
    };
}

func logicalNot(val) {
    if (val == 0) {
        return 1;
    }

    return 0;
}

func logicalAnd(val1, val2) {
    if (val1 == 1 && val2 == 1) {
        return 1;
    }

    return 0;
}

func logicalOr(val1, val2) {
    if (val1 == 1 || val2 == 1) {
        return 1;
    }

    return 0;
}

func inverter(input, output) {
    var inverterDelay = INVERTER_DELAY;


    func invertAction() {
        afterDelay(inverterDelay, () => {
            var newValue = logicalNot(input.getSignal());
            output.setSignal(newValue);
        });
    }

    input.addAction(invertAction);
}

func andGate(input1, input2, output) {
    var andDelay = AND_GATE_DELAY;

    func andAction() {
        afterDelay(andDelay, () => {
            var newValue = logicalAnd(input1.getSignal(), input2.getSignal());
            output.setSignal(newValue);
        });
    }

    input1.addAction(andAction);
    input2.addAction(andAction);
}

func orGate(input1, input2, output) {
    var orDelay = OR_GATE_DELAY;

    func orAction() {
        afterDelay(orDelay, () => {
            var newValue = logicalOr(input1.getSignal(), input2.getSignal());
            output.setSignal(newValue);
        });
    }

    input1.addAction(orAction);
    input2.addAction(orAction);
}

func halfAdder(a, b, sum, carry) {
    var d = Wire();
    var e = Wire();

    orGate(a, b, d);
    andGate(a, b, carry);
    inverter(carry, e);
    andGate(d, e, sum);
}

func fullAdder(a, b, cIn, sum, cOut) {
    var s = Wire();
    var c1 = Wire();
    var c2 = Wire();

    halfAdder(b, cIn, s, c1);
    halfAdder(a, s, sum, c2);
    orGate(c1, c2, cOut);
}

var agenda = PriorityQueue();

func afterDelay(delay, action) {
    agenda.enqueue(delay + agenda.currentPriority(), action);
}

func propagate() {
    if (agenda.isEmpty()) {
        return;

    }

    // Peeking before dequeuing so we don't lose track of current time
    var item = agenda.peek();
    item();
    agenda.dequeue();
    propagate();
}

func probe(name, wire) {
    wire.addAction(() => {
       console.println(name + " at " + agenda.currentPriority() + " is " + wire.getSignal());
  });
}


// Create circuit here:

var a = Wire();
a.setSignal(1);
var b = Wire();
b.setSignal(1);
var cIn = Wire();
cIn.setSignal(0);
var sum = Wire();
var cOut = Wire();

probe("a", a);
probe("b", b);
probe("cIn", cIn);
probe("sum", sum);
probe("cOut", cOut);

fullAdder(a, b, cIn, sum, cOut);

propagate();

console.println();
console.println("Input: ");
console.println("A is " + a.getSignal());
console.println("B is " + b.getSignal());
console.println("Cin is " + cIn.getSignal());

console.println();

console.println("Output: ");
console.println("Sum is " + sum.getSignal());
console.println("Cout is " + cOut.getSignal());


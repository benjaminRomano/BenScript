//Color is either "R" or "B"
func Node(key, val, parent, left, right, color) {

    return {
        key: key,
        val: val,
        parent: parent,
        left: left,
        right: right,
        color: color
    };
}

func Dictionary() {

    var root = null;

    func insert(key, val) {
        var node = Node("" + key, val, null, null, null, "R");


        if (!root) {
            root = node;
        } else {
            node = insertRec(root, node);
        }

        //insert fix up
        insertFixUp(node);
    }

    func contains(key) {
        return !!getRec(root, "" + key);
    }

    func get(key) {
        var node = getRec(root, "" + key);

        if (!node) {
            return null;
        }

        return node.val;
    }

    func getRec(node, key) {
        if (!node) {
            return null;
        } else if (key == node.key) {
            return node;
        } else if (key < node.key) {
            return getRec(node.left, key);
        }

        return getRec(node.right, key);
    }

    func insertRec(r, node) {
        if (node.key == r.key) {
            r.val = node.val;
            return r;
        }

        if (node.key < r.key) {
            if (!r.left) {
                r.left = node;
                node.parent = r;
                return node;
            }
            return insertRec(r.left, node);
        }

        if (!r.right) {
            r.right = node;
            node.parent = r;
            return node;
        }

        return insertRec(r.right, node);
    }

    func insertFixUp(node) {
        while (true) {
            if (node == root || node.parent.color == "B") {
                break;
            } else if (uncle(node) && uncle(node).color == "R") {
                node.parent.color = "B";
                uncle(node).color = "B";
                node.parent.parent.color = "R";
                node = node.parent.parent;
                continue;
            }

            var parent = node.parent;

            // Is not linear
            if ((parent.left == node && parent.parent.right == parent)
                || (parent.right == node && parent.parent.left == parent)) {

                rotate(node, parent);

                var temp = node;
                node = parent;
                parent = temp;
            }

            parent.color = "B";
            parent.parent.color = "R";
            rotate(parent, parent.parent);
        }

        root.color = "B";
    }

    func remove(key) {
        var z = getRec(root, "" + key);
        var color = z.color;

        //Using a sentinel node to use removeFixUp
        var x = Node(null, null, z, null, null, "B");

        if (!z.left) {
            if (z.right) {
               x = z.right;
            }
            rbTransplant(z, x);
        } else if (!z.right) {
            if (z.left) {
               x = z.left;
            }
            rbTransplant(z, x);
        } else {
            var y = successor(z.left);
            color = y.color;

            if (y.left) {
                x = y.left;
            } else {
                x.parent = y;
                y.left = x;
            }

            if (y.parent != z) {
                rbTransplant(y, x);
                y.left = z.left;
                y.left.parent = y;
            }

            rbTransplant(z, y);
            y.right = z.right;
            y.right.parent = y;
            y.color = z.color;
        }
        if (color == "B") {
            removeFixUp(x);
        }

        // Remove sentinel
        if (!x.key) {
            if (!x.parent) {
                root = null;
            } else if (x.parent.left == x) {
                x.parent.left = null;
            } else {
                x.parent.right = null;
            }
        }

        return z.val;
    }

    func successor(node) {
        if (!node.right) {
            return node;
        }

        return successor(node.right);
    }

    func rbTransplant(n1, n2) {

        if (!n1.parent) {
            root = n2;
        } else if (n1.parent.left == n1) {
            n1.parent.left = n2;
        } else {
            n1.parent.right = n2;
        }

        n2.parent = n1.parent;
    }

    func successor(node) {
        if (!node.left && ! node.right) {
            return node;
        } else if (node.right) {
            return successor(node.right);
        }

        return node;
    }

    func removeFixUp(node) {
        while (node != root && node.color == "B") {
            if (sibling(node) && sibling(node).color == "R") {
                node.parent.color = "R";
                sibling(node).color = "B";
                rotate(sibling(node), node.parent);
                continue;
            } else if (nephew(node) && nephew(node).color == "R") {
                sibling(node).color = node.parent.color;
                node.parent.color = "B";
                nephew(node).color = "B";
                rotate(sibling(node), node.parent);
                node = root;
                continue;
            } else if (niece(node) && niece(node).color == "R") {
                niece(node).color = "B";
                sibling(node).color = "R";
                rotate(niece(node), sibling(node));
                continue;
            }

            sibling(node).color = "R";
            node = node.parent;
        }

        node.color = "B";
    }

    func rotate(n1, n2) {
        //Update n2's parent's left/right references
        if (!n2.parent) {
            root = n1;
        } else if (n2.parent.left == n2) {
            n2.parent.left = n1;
        } else {
            n2.parent.right = n1;
        }

        //Update n1/n2 parent references
        n1.parent = n2.parent;
        n2.parent = n1;

        if (n2.left == n1) {
            n2.left = n1.right;

            if (n1.right) {
                n1.right.parent = n2;
            }

            n1.right = n2;
        } else {
            n2.right = n1.left;

            if (n1.left) {
                n1.left.parent = n2;
            }

            n1.left = n2;
        }
    }

    func uncle(node) {
        if (node.parent.parent.left == node.parent) {
            return node.parent.parent.right;
        }
        return node.parent.parent.left;
    }

    func sibling(node) {
        if (node.parent.left == node) {
            return node.parent.right;
        }

        return node.parent.left;
    }

    func niece(node) {
        var s = sibling(node);

        if (!s) {
            return null;
        } else if (node.parent.left == node) {
            return s.left;
        }

        return s.right;
    }

    func nephew(node) {
        var s = sibling(node);

        if (!s) {
            return null;
        } else if (node.parent.left == node) {
            return s.right;
        }

        return s.left;
    }

    func printTree() {
        printTreeRec(root, "");
    }

    func printTreeRec(node, spaces) {
        if (!node) return;
        console.println(spaces + node);
        printTreeRec(node.left, spaces + "\t");
        printTreeRec(node.right, spaces + "\t");
    }

    return {
        insert: insert,
        remove: remove,
        get: get,
        contains: contains,
        printTree: printTree
    };
}
